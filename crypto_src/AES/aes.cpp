// crypto_src/AES/aes.cpp
// Complete AES-128 ECB implementation based on reference code
#include <cstdint>
#include <emscripten.h>

// AES S-box
static const uint8_t sbox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

// AES Inverse S-box
static const uint8_t rsbox[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

// Rcon (Round Constants) - based on reference
static const uint8_t rcon[256] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
};

// AddRoundKey
void addRoundKey(uint8_t* input, uint8_t* key) {
    for (int i = 0; i < 16; i++) {
        input[i] ^= key[i];
    }
}

// SubBytes
void byteSubstitution(uint8_t* input) {
    for (int i = 0; i < 16; i++) {
        input[i] = sbox[input[i]];
    }
}

// InvSubBytes
void invByteSubstitution(uint8_t* input) {
    for (int i = 0; i < 16; i++) {
        input[i] = rsbox[input[i]];
    }
}

// ShiftRows - based on reference implementation
void shiftRows(uint8_t* input) {
    uint8_t result[16];

    result[0] = input[0];
    result[1] = input[5];
    result[2] = input[10];
    result[3] = input[15];

    result[4] = input[4];
    result[5] = input[9];
    result[6] = input[14];
    result[7] = input[3];

    result[8] = input[8];
    result[9] = input[13];
    result[10] = input[2];
    result[11] = input[7];

    result[12] = input[12];
    result[13] = input[1];
    result[14] = input[6];
    result[15] = input[11];

    for (int i = 0; i < 16; i++) {
        input[i] = result[i];
    }
}

// InvShiftRows
void invShiftRows(uint8_t* input) {
    uint8_t result[16];

    result[0] = input[0];
    result[1] = input[13];
    result[2] = input[10];
    result[3] = input[7];

    result[4] = input[4];
    result[5] = input[1];
    result[6] = input[14];
    result[7] = input[11];

    result[8] = input[8];
    result[9] = input[5];
    result[10] = input[2];
    result[11] = input[15];

    result[12] = input[12];
    result[13] = input[9];
    result[14] = input[6];
    result[15] = input[3];

    for (int i = 0; i < 16; i++) {
        input[i] = result[i];
    }
}

// Multiplication by 2 in GF(2^8) - based on reference
uint8_t mul2(uint8_t in) {
    uint8_t res = (2 * in);
    if (res & 0x100) {
        res = res ^ 0x1b;
    }
    return res;
}

// Multiplication by 3 in GF(2^8) - based on reference
uint8_t mul3(uint8_t in) {
    uint8_t res = (2 * in) ^ in;
    if (res & 0x100) {
        res = res ^ 0x1b;
    }
    return res;
}

// MixColumns - based on reference implementation
void mixColumn(uint8_t* input) {
    uint8_t result[16];

    for (int i = 0; i < 4; i++) {
        result[4 * i + 0] = mul2(input[4 * i]) ^ mul3(input[4 * i + 1]) ^ input[4 * i + 2] ^ input[4 * i + 3];
        result[4 * i + 1] = input[4 * i] ^ mul2(input[4 * i + 1]) ^ mul3(input[4 * i + 2]) ^ input[4 * i + 3];
        result[4 * i + 2] = input[4 * i] ^ input[4 * i + 1] ^ mul2(input[4 * i + 2]) ^ mul3(input[4 * i + 3]);
        result[4 * i + 3] = mul3(input[4 * i]) ^ input[4 * i + 1] ^ input[4 * i + 2] ^ mul2(input[4 * i + 3]);
    }

    for (int i = 0; i < 16; i++) {
        input[i] = result[i];
    }
}

// Multiplication by 9, 11, 13, 14 in GF(2^8) for InvMixColumns
uint8_t mul9(uint8_t in) {
    return mul2(mul2(mul2(in))) ^ in; // 8 + 1 = 9
}

uint8_t mul11(uint8_t in) {
    return mul2(mul2(mul2(in))) ^ mul2(in) ^ in; // 8 + 2 + 1 = 11
}

uint8_t mul13(uint8_t in) {
    return mul2(mul2(mul2(in))) ^ mul2(mul2(in)) ^ in; // 8 + 4 + 1 = 13
}

uint8_t mul14(uint8_t in) {
    return mul2(mul2(mul2(in))) ^ mul2(mul2(in)) ^ mul2(in); // 8 + 4 + 2 = 14
}

// InvMixColumns
void invMixColumn(uint8_t* input) {
    uint8_t result[16];

    for (int i = 0; i < 4; i++) {
        result[4 * i + 0] = mul14(input[4 * i]) ^ mul11(input[4 * i + 1]) ^ mul13(input[4 * i + 2]) ^ mul9(input[4 * i + 3]);
        result[4 * i + 1] = mul9(input[4 * i]) ^ mul14(input[4 * i + 1]) ^ mul11(input[4 * i + 2]) ^ mul13(input[4 * i + 3]);
        result[4 * i + 2] = mul13(input[4 * i]) ^ mul9(input[4 * i + 1]) ^ mul14(input[4 * i + 2]) ^ mul11(input[4 * i + 3]);
        result[4 * i + 3] = mul11(input[4 * i]) ^ mul13(input[4 * i + 1]) ^ mul9(input[4 * i + 2]) ^ mul14(input[4 * i + 3]);
    }

    for (int i = 0; i < 16; i++) {
        input[i] = result[i];
    }
}

// Key expansion function f - based on reference
void f(uint8_t* extendedKey, int index) {
    extendedKey[(index + 1) * 4] = sbox[extendedKey[index * 4 + 1]] ^ rcon[((index + 1) / 4)];
    extendedKey[(index + 1) * 4 + 1] = sbox[extendedKey[index * 4 + 2]];
    extendedKey[(index + 1) * 4 + 2] = sbox[extendedKey[index * 4 + 3]];
    extendedKey[(index + 1) * 4 + 3] = sbox[extendedKey[index * 4]];
}

// Key expansion - based on reference implementation
void extendKey(uint8_t* key, uint8_t* extendedKey) {
    for (int i = 0; i < 16; i++) {
        extendedKey[i] = key[i];
    }
    
    for (int i = 1; i <= 10; i++) {
        int w_index = i * 4;
        f(extendedKey, w_index - 1);
        for (int j = 0; j < 4; j++) {
            extendedKey[w_index * 4 + j] ^= extendedKey[(w_index - 4) * 4 + j];
        }

        for (int k = 0; k < 4 - 1; k++) {
            w_index++;
            for (int j = 0; j < 4; j++) {
                extendedKey[w_index * 4 + j] = extendedKey[(w_index - 4) * 4 + j] ^ extendedKey[(w_index - 1) * 4 + j];
            }
        }
    }
}

// AES encryption - based on reference implementation
void encrypt(uint8_t* input, uint8_t* extendedKey) {
    // ROUND 0
    addRoundKey(input, extendedKey);

    for (int i = 1; i < 10; i++) {
        byteSubstitution(input);
        shiftRows(input);
        mixColumn(input);
        addRoundKey(input, extendedKey + 16 * i);
    }

    // ROUND 10
    byteSubstitution(input);
    shiftRows(input);
    addRoundKey(input, extendedKey + 16 * 10);
}

// AES decryption
void decrypt(uint8_t* input, uint8_t* extendedKey) {
    // ROUND 10
    addRoundKey(input, extendedKey + 16 * 10);
    invShiftRows(input);
    invByteSubstitution(input);

    for (int i = 9; i >= 1; i--) {
        addRoundKey(input, extendedKey + 16 * i);
        invMixColumn(input);
        invShiftRows(input);
        invByteSubstitution(input);
    }

    // ROUND 0
    addRoundKey(input, extendedKey);
}

extern "C" {

EMSCRIPTEN_KEEPALIVE
int process_aes(const uint8_t* data, int data_len, const uint8_t* key, uint8_t* output, bool encrypt_mode) {
    // Safety checks
    if (!data || !key || !output) {
        return 0; // Error: null pointers
    }
    
    if (data_len <= 0) {
        return 0; // Error: invalid data length
    }
    
    // Ensure data length is multiple of 16
    if (data_len % 16 != 0) {
        return 0; // Error: data length not multiple of 16
    }
    
    uint8_t extendedKey[176]; // 16 * (10 + 1) = 176 bytes
    extendKey((uint8_t*)key, extendedKey);
    
    // Process data in 16-byte (128-bit) chunks
    for (int i = 0; i < data_len; i += 16) {
        // Additional bounds check
        if (i + 16 > data_len) {
            return 0; // Error: would exceed bounds
        }
        
        uint8_t state[16];
        
        // Copy input block to state
        for (int j = 0; j < 16; j++) {
            if (i + j < data_len) {
                state[j] = data[i + j];
            } else {
                state[j] = 0; // Padding for incomplete blocks
            }
        }
        
        if (encrypt_mode) {
            encrypt(state, extendedKey);
        } else {
            decrypt(state, extendedKey);
        }
        
        // Copy state to output
        for (int j = 0; j < 16; j++) {
            output[i + j] = state[j];
        }
    }
    
    return 1; // Success
}

} // extern "C"     